syntax = "proto3";
package peer;

message SyncMessage {
  // The member id of the sending party.
  uint64 from = 1;
  uint64 to = 2;
  // The name of the sending peer.
  string name = 3;
  // The encoded sync message.
  bytes data = 4;
}

message GetMemberIDResponse {
  // The member id of the responder.
  uint64 id = 1;
}

message Empty {}

message Member {
  // ID is the member ID for this member.
  uint64 ID = 1;
  // name is the human-readable name of the member. If the member is not
  // started, the name will be an empty string.
  string name = 2;
  // peerURLs is the list of URLs the member exposes to the cluster for
  // communication.
  repeated string peerURLs = 3;
  // clientURLs is the list of URLs the member exposes to clients for
  // communication. If the member is not started, clientURLs will be empty.
  repeated string clientURLs = 4;
}


message MemberListRequest {}

message MemberListResponse {
  // cluster_id is the ID of the cluster which sent the response.
  uint64 cluster_id = 1;
  // members is a list of all members associated with the cluster.
  repeated Member members = 2;
}

service Peer {
  // Sync accepts many sync messages.
  rpc Sync(stream SyncMessage) returns (Empty) { }

  // SyncOne accepts a single sync message.
  rpc SyncOne(SyncMessage) returns (Empty) { }

  // gets the members id (for use as a sync peer id)
  rpc GetMemberID(Empty) returns (GetMemberIDResponse) {}

  // MemberList lists all the members in the cluster.
  rpc MemberList(MemberListRequest) returns (MemberListResponse) {}
}
